#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})

export PATH="/data/adb/ap/bin:/data/adb/ksu/bin:/data/adb/magisk:$PATH"

box_confs_dir=${parent_dir}/confs
bin_box=${parent_dir}/binary/sing-box

xray_confs_dir=${parent_dir}/xray/confs
bin_xray=${parent_dir}/xray/binary/xray

box_user=0
box_group=3005

xray_user=0
xray_group=3010

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S]")
  case $1 in
    Info)
      [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2"
      ;;
    Warn)
      [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2"
      ;;
    Error)
      [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2"
      ;;
    *)
      [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
      ;;
  esac
}

disable_ipv6() {
  echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "ipv6: disable" >> "${scripts_dir}/run.log"
} 

enable_ipv6() {
  echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "ipv6: enable" >> "${scripts_dir}/run.log"
} 

ip_rules() {
local max_retries=5
local retry_count=0
local index=""
if [ ! -f "${scripts_dir}/tables.tmp" ]; then
  device=$(awk -F'"' '/"interface_name"/ {print $4; exit}' ${box_confs_dir}/*.json)
  while [ -z "$index" ] && [ $retry_count -lt $max_retries ]; do
    index=$(ip route show table all | grep -E "dev ${device} table [0-9]" | head -n 1 | awk '{print $5}')
    if [ -n "$index" ]; then
        break
    fi
    sleep 1
    retry_count=$((retry_count + 1))
  done
  echo "${index} ${device}" > ${scripts_dir}/tables.tmp
fi
read index device < "${scripts_dir}/tables.tmp"
log Info "device: ${device}" >> ${scripts_dir}/run.log
log Info "index: $index" >> ${scripts_dir}/run.log

local action=$1
ipv4_rules=(
  "iif lo goto 6000 pref 5000"
  "iif ${device} lookup main suppress_prefixlength 0 pref 5010"
  "iif ${device} goto 6000 pref 5020"
  "from 10.0.0.0/8 lookup ${index} pref 5030"
  "from 172.16.0.0/12 lookup ${index} pref 5040"
  "from 192.168.0.0/16 lookup ${index} pref 5050"
  "nop pref 6000"
  "lookup main pref 7000"
  "from all iif ${device} lookup main suppress_prefixlength 0 pref 8000"
)
  for rule in "${ipv4_rules[@]}"; do
    ip -4 rule "${action}" ${rule}
    log Info "ip -4 rule ${action} ${rule}" >> ${scripts_dir}/run.log
  done

ipv6_rules=(
  "iif lo goto 6000 pref 5000"
  "iif ${device} lookup main suppress_prefixlength 0 pref 5010"
  "iif ${device} goto 6000 pref 5020"
  # "from 2001:db8::/32 lookup ${index} pref 5030"
  # "from fc00::/7 lookup ${index} pref 5040"
  # "from fd00::/8 lookup ${index} pref 5050"
  "nop pref 6000"
  "lookup main pref 7000"
  "from all iif ${device} lookup main suppress_prefixlength 0 pref 8000"
)
  for rule in "${ipv6_rules[@]}"; do
    ip -6 rule "${action}" ${rule}
    log Info "ip -6 rule ${action} ${rule}" >> ${scripts_dir}/run.log
  done
}

iptables_rules() {
local iptables=$1
local action=$2
if [[ "${action}" == "-I" ]]; then
  ${iptables} -N TUN_FORWARD 2> /dev/null
  ${iptables} -F TUN_FORWARD 2> /dev/null
  ${iptables} "${action}" TUN_FORWARD -i "${device}" -j ACCEPT
  ${iptables} "${action}" TUN_FORWARD -o "${device}" -j ACCEPT
  ${iptables} "${action}" FORWARD -j TUN_FORWARD
elif [[ "${action}" == "-D" ]]; then
  ${iptables} "${action}" FORWARD -j TUN_FORWARD
  ${iptables} -F TUN_FORWARD 2> /dev/null
  ${iptables} -X TUN_FORWARD 2> /dev/null
fi
# quic
    ${iptables} "${action}" OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
    ${iptables} "${action}" OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${box_user} ! --gid-owner ${box_group} -j REJECT
}

forward() {
local action=$1
if [ "${action}" = "-I" ]; then
  echo 1 > /proc/sys/net/ipv4/ip_forward
  echo 2 > /proc/sys/net/ipv4/conf/default/rp_filter
  echo 2 > /proc/sys/net/ipv4/conf/all/rp_filter
  enable_ipv6
  ip_rules "add"
elif [ "${action}" = "-D" ]; then
  disable_ipv6
  ip_rules "del"
fi
iptables_rules "iptables" "${action}"
iptables_rules "ip6tables" "${action}"
}

start_FreeLink() {
if [ -f "${bin_box}" ]; then
  log Info "---welcome---" > "${scripts_dir}/run.log"
    if pidof ${bin_box} > /dev/null 2>&1; then
        log Info "Close existing processes $(pidof ${bin_box})"
        stop_FreeLink
        log Info "---restart---" > "${scripts_dir}/run.log"
    fi
  log Info "slot$(getprop ro.boot.slot_suffix)" >> "${scripts_dir}/run.log"
  chmod +x ${bin_box}
  chown root:net_admin ${bin_box}
  nohup busybox setuidgid ${box_user}:${box_group} ${bin_box} run -C ${box_confs_dir} -D ${parent_dir}/binary/ > /dev/null 2>&1 &
  forward -I
  chmod +x ${bin_xray}
  chown root:net_admin ${bin_xray}
  nohup busybox setuidgid ${xray_user}:${xray_group} ${bin_xray} run -confdir ${xray_confs_dir} > /dev/null 2>&1 &
  pid=$(pidof sing-box 2> /dev/null)
  [ -n "${pid}" ] && log Info "add sing-box pid: ${pid}" >> "${scripts_dir}/run.log"
  pid=$(pidof xray 2> /dev/null)
  [ -n "${pid}" ] && log Info "add xray pid: ${pid}" >> "${scripts_dir}/run.log"
  am start -a android.intent.action.VIEW -n com.jozein.xedgepro/.ui.ActivityPerformAction --ei __0 111 --es __1 "代理已开启" > /dev/null 2>&1
  log Info "Create a new process $(pidof ${bin_box})"
  whitelist_rules add
else
  log Error "Binary ${bin_box} not found"
  am start -a android.intent.action.VIEW -n com.jozein.xedgepro/.ui.ActivityPerformAction --ei __0 111 --es __1 "${bin_box##*/} not found" > /dev/null 2>&1
  exit 1
fi
}

stop_FreeLink() {
  if ! pidof "${bin_box}" > /dev/null 2>&1; then
      exit 1
  fi
  log Info "---goodbye---" > "${scripts_dir}/run.log"
  log Info "slot$(getprop ro.boot.slot_suffix)" >> "${scripts_dir}/run.log"
  forward -D
  whitelist_rules del
  pid=$(pidof sing-box 2> /dev/null)
  [ -n "${pid}" ] && log Info "del sing-box pid: ${pid}" >> "${scripts_dir}/run.log"
  pid=$(pidof xray 2> /dev/null)
  [ -n "${pid}" ] && log Info "del xray pid: ${pid}" >> "${scripts_dir}/run.log"
  kill $(pidof sing-box) > /dev/null 2>&1
  kill $(pidof xray) > /dev/null 2>&1
  am start -a android.intent.action.VIEW -n com.jozein.xedgepro/.ui.ActivityPerformAction --ei __0 111 --es __1 "代理已关闭" > /dev/null 2>&1
  rm -f ${scripts_dir}/tables.tmp
  rm -f ${scripts_dir}/*.list
  find "${parent_dir}" -type f -name "*.log" ! -name "run.log" -exec rm -f {} +
}

# version
version() {
version_box=$(${bin_box} version | head -n 1 | awk '{print $3}')
version_xray=$(${bin_xray} version | head -n 1 | awk '{print $2}')
}

description() {
local symbol=$1
local event=$2
version
prop_file="/data/adb/modules/FreeLink/module.prop"
core_name_box="${bin_box##*/}"
core_name_xray="${bin_xray##*/}"
current_time=$(date "+[%m.%d %H:%M]")
sed -i "/description/c\description=${current_time} ${symbol} ${core_name_box} ${version_box} work with ${core_name_xray} ${version_xray} ${network_mode} ${event}" "${prop_file}"
log Info "${symbol} ${network_mode} ${event}" >> "${scripts_dir}/run.log"
}

# description
run_description() {
if pidof "${bin_box}" > /dev/null 2>&1; then
  description "🤪" "started"
else
  description "🥴" "stopped"
fi
}

# 定义白名单包名数组
white_package_list=(
  app.revanced.android.gms
  app.revanced.android.youtube
  app.rvx.android.youtube
  bin.mt.plus
  bin.mt.termex
  com.android.chrome
  com.android.vending
  com.github.android
  com.google.android.apps.authenticator2
  com.google.android.apps.photos
  com.google.android.gms
  com.google.android.googlequicksearchbox
  com.google.android.inputmethod.latin
  com.google.android.marvin.talkback
  com.google.android.printservice.recommendation
  com.google.android.youtube
  com.google.ar.core
  com.microsoft.copilot
  com.openai.chatgpt
  com.reddit.frontpage
  com.termux
  com.twitter.android
  com.zhiliaoapp.musically
  io.github.huskydg.magisk
  org.mozilla.firefox
  org.telegram.messenger
  org.telegram.messenger.web
  org.thunderdog.challegram
  vn.innoloop.VOALearningEnglish
  qt.fceimbhnru.jud
  com.topjohnwu.magisk
  me.weishu.kernelsu
  by.green.tuber
  me.bmax.apatch
  com.google.android.apps.translate
)

whitelist_uid() {
  if [ -f "$scripts_dir/uids.list" ]; then
    rm "$scripts_dir/uids.list"
  fi

  for package_name in "${white_package_list[@]}"; do
    uid=$(busybox awk -v package="$package_name" '$1 ~ package {print $2}' /data/system/packages.list)
    if [ ! -z "$uid" ]; then
      echo "$uid" >> "$scripts_dir/uids.list"
      # echo "$uid:$package_name" >> "$scripts_dir/uids1.list"
    fi
  done
  sort -n "$scripts_dir/uids.list" | uniq > "$scripts_dir/uids.list.tmp"
  mv "$scripts_dir/uids.list.tmp" "$scripts_dir/uids.list"
}

whitelist_array() {
  start=0
  end=999999

  if [ -f "$scripts_dir/uids.list" ]; then
    uids=$(cat "$scripts_dir/uids.list")
  else
    echo "$start-$end"
    return
  fi

  previous=$start
  for uid in $uids; do
    if [ "$((uid - 1))" -ge "$previous" ]; then
      echo "$previous-$((uid - 1))"
    fi
    previous=$((uid + 1))
  done

  if [ "$previous" -le "$end" ]; then
    echo "$previous-$end"
  fi
}

whitelist_rules() {
local action=${1}
whitelist_uid

ranges=()

output=$(whitelist_array)

if [ ${#white_package_list[@]} -gt 0 ]; then
  for range in $output; do
    ranges+=("$range")
  done
fi

if [ ${#ranges[@]} -gt 0 ]; then
  for range in "${ranges[@]}"; do
    echo "${action} from all uidrange ${range} priority 9000 goto 9010"
    ip -4 rule ${action} from all uidrange ${range} priority 9000 goto 9010
    ip -6 rule ${action} from all uidrange ${range} priority 9000 goto 9010
  done
else
  return
fi
}

case "$1" in
    enable)
        start_FreeLink
        ;;
    disable)
        stop_FreeLink
        ;;
    description)
        run_description
        ;;
esac

# FreeLink.service
